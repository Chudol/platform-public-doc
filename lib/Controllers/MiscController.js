/**
 * PlatformPublicAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class MiscController {
    /**
     * - Endpoint for downloading activitiy data like "Finished Course", "Finished Lesson", etc.
     * - Endpoint will download all data of selected trigger name for last 1 hour and mark them
     * as "POLLED", so on next call this data will be ignored
     * #### How to use
     * - Endpoint accepting parameter **triggerName** which can be one of this:
     * <br/>
     * **finish-course**: poll data about users and course they finished
     * **finish-lesson**: poll data about users and lesson they finished
     * <br/><br/>
     * - Endpoint also accepting query, when you can select which course or lesson activity you
     * want to get
     * <br />
     * **course**: Course ID for finish-course
     * **lesson**: Lesson ID for finish-lesson
     *
     * @param {string} triggerName TODO: type description here
     * @param {string} xApiKey TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static pollActivityData(triggerName, xApiKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri();

        let _pathUrl = '/poll/{triggerName}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            triggerName: { value: triggerName, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'x-api-key': xApiKey,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'M200PollActivityDatum'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = MiscController;
