/**
 * PlatformPublicAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.CoursesController;
const M200GetCourses = testerlib.M200GetCourses;

describe("CoursesController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Get courses with pagination

#### Additionally Data

``` membersData ```: The sum of members which paid course and members which have access to course via membership  
``` memberships ```: Memberships which contains this course

#### Response Data

```json
{
    "items": [
        {
            "_id": ID of course
            "name": Course name
            "hasCheckout": Flag, if course can be bought separately (Boolean)
            "price": Default price of course,
            "createdAt": Date of course creation
            "description": Description (HTML)
            "membersPaidCourse": Members, which bought course separately, or has been given to them from quiz or admin
            "membersInCourseMembership":Members, which has access to course from membership
            "totalMembers": Total sum of membersPaidCourse and membersInCourseMembership
            "memberships: [
                {
                    "_id": ID of membership
                    "name": Name of Membership
                }
        }
    ]
    "pagination": {
        "totalItems": Total items for all pages
        "totalPages": Total pages
        "page": Page number (Starts with 0)
        "limit": Items for one page
        "skip": -
    }
}
```
     */
    it("should testGetCourses response", function testGetCoursesTest(done) {
        // parameters for the API call
        let page = 0;
        let limit = 10;
        let name = 'cour';
        let additionallyData = 'membersData, memberships';
        let xApiKey = '{SECRET_KEY}';

        controller.getCourses(page, limit, name, additionallyData, xApiKey, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "items": [
    {
      "_id": "5f9be1250de1cf1618c88f6e",
      "name": "Course 1",
      "description": "<p>Description</p>",
      "hasCheckout": true,
      "price": 179.99,
      "createdAt": "2020-10-30T09: 47: 17.125Z",
      "membersPaidCourse": 236,
      "membersInCourseMembership": 0,
      "totalMembers": 236,
      "memberships": [
        {
          "_id": "5f9e8c2cb5e7e63fc0bba788",
          "name": "Membership 1"
        }
      ]
    },
    {
      "_id": "5f9becf80de1cf1618c88f90",
      "name": "Course 2",
      "description": "<p>Lorem ipsum dolor sit amet</p>",
      "hasCheckout": true,
      "price": 2399,
      "createdAt": "2020-10-30T10: 37: 44.786Z",
      "membersPaidCourse": 6,
      "membersInCourseMembership": 139,
      "totalMembers": 145,
      "memberships": [
        {
          "_id": "5fc5499672ff52001cd86f7c",
          "name": "Self Improvement"
        }
      ]
    }
  ],
  "pagination": {
    "totalItems": 2,
    "totalPages": 1,
    "page": 0,
    "limit": 10,
    "skip": 0
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
