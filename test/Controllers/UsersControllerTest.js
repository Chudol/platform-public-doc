/**
 * PlatformPublicAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.UsersController;
const M200GetUsers = testerlib.M200GetUsers;
const M200GetUser = testerlib.M200GetUser;
const M200CreateUser = testerlib.M200CreateUser;
const CreateUserRequest = testerlib.CreateUserRequest;
const M200AssignCourseToUser = testerlib.M200AssignCourseToUser;
const AssignCoursesToUserRequest = testerlib.AssignCoursesToUserRequest;
const M200UpdateUser = testerlib.M200UpdateUser;
const UpdateUserRequest = testerlib.UpdateUserRequest;
const M200DeleteUser = testerlib.M200DeleteUser;

describe("UsersController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Get user by ID

#### Additionally Data

``` courses ```: Courses analytics (Progress, number of lessons, lessons which user started)  
``` modules ```: Modules Analytics for Courses Analytics (Requires to pull courses in Additionally Data)  
``` lessons ```: Lessons Analytics for Modules Analytics (Requires to pull courses and modules in Additionally Data)  
``` orders ```: The sum of all orders invoices , total numbers of all invoices and all orders data  
``` quizes ```: Results of finished quizes  
``` subscriptions ```: Active and Ended subscriptions

##### In first item of modulesAnalytics array are lessons which has NO MODULE and their progress

#### Response Data

```json
{
    "_id": ID of user
    "firstName": First Name
    "lastName": Last Name
    "createdAt": Registration date
    "email": Email
    "credits": Total amount of credits
    "finishedLessons": [
        {
            "_id": ID of lesson
            "name": Lesson name
        }
    ]
    "inProgressLessons": [
        {
            "_id": ID of lesson
            "name": Lesson name
        }
    ]
    "purchasedCourses": [
        {
            "_id": ID of course
            "name": Course name
        }
    ]
    "purchasedLessons": [
        {
            "_id": ID of lesson
            "name": Lesson name
        }
    ]
    "loginSessions": Total login sessions
    "totalLoginTime": Total active time
    "averageLoginTime": Average active time
    "courses": [
        {
            "_id": Id of course
            "name": Name of course
            "progress": Percentage progress
            "startAt": Date, when user started course
            "userLessonsStarted": Lessons, that user started
            "lessonsCount": Total lessons in the course
            "modulesAnalytics": [
                {
                    "progress": Progress of lessons with NO MODULE
                    "lessonsAnalytics": [
                        {
                            "_id": ID of lesson
                            "name": Lesson name
                            "notStartedYet": Flag, if user started this lesson (Boolean)
                            "isInProgress": Flag, if user has lesson in progress (Boolean)
                            "isFinished": Flag, if user finished this lesson (Boolean)
                        }
                    ]
                }
                {
                    "_id": ID of module
                    "name": Module Name
                    "progress": Progress of module
                    "lessonsAnalytics": [
                        {
                            "_id": ID of lesson
                            "name": Lesson name
                            "notStartedYet": Flag, if user started this lesson (Boolean)
                            "isInProgress": Flag, if user has lesson in progress (Boolean)
                            "isFinished": Flag, if user finished this lesson (Boolean)
                        }
                    ]
                }
            ]
        }
    ]
    "totalPurchases": Total amount of all orders (Initial + recurring)
    "lifeTimeValue": Total amount of spend money on platform
    "orders": [
        {
            "_id": Id of order
            "vs": Variable Symbol
            "price": Price
            "createdAt": Date of payment
            "course": {
                "_id": Id of course paid
                "name": Name of course paid
            }
        }
        {
            "_id": Id of order
            "vs": Variable Symbol
            "price": Price
            "createdAt": Date of payment
            "checkout": {
                "_id": Id of checkout paid
                "name": Name of checkout paid
            }
        }
    ]
    "quizes": [
        {
            "_id": Id of quiz
            "title": Quiz Title
            "finishedAt": Date of quiz finish
            "points": Points acquired in quiz
            "results": [
                {
                    "question": Question Text (String)
                    "answer": Answer (String)
                }
            ]
            "reward": {
                "title": Title of reward
                "minPoints": Minimum points for reward
                "maxPoints": Maximum points for reward
                "creditsReward": Credits rewarded to user
                "courses": [
                    {
                        "_id": Id of course rewarded to user
                        "name": Name of course rewarded to user
                    }
                ]
            }
        }
    ]
    "subscriptions": [
        {
            "membershipStarted": Date of membership start
            "membershipTo": Date of membership end (Or date of next payment)
            "active": Flag, if subscriptions is still active (Boolean)
            "refunded": Flag, if subscriptions is refunded (Boolean)
            "isPastDue": Flag, if subscriptions is Past Due (Boolean)
            "cancelled": Flag, if subscriptions is cancelled (Boolean)
            "membership": {
                "name": Name of subscription membership
            }
            "period": {
                "name": Name of subscription membership period
            }
        }
    ]
    "endedSubscriptions": [
        {
            "membershipStarted": Date of membership start
            "membershipTo": Date of membership ended
            "active": false
            "refunded": Flag, if subscriptions is refunded (Boolean)
            "isPastDue": Flag, if subscriptions is Past Due (Boolean)
            "cancelled": Flag, if subscriptions is cancelled (Boolean)
            "membership": {
                "name": Name of subscription membership
            }
            "period": {
                "name": Name of subscription membership period
            }
        }
    ]
}
```
     */
    it("should testGetUser response", function testGetUserTest(done) {
        // parameters for the API call
        let additionallyData = 'courses, modules, lessons, orders, quizes, subscriptions';
        let userId = '5fc8b3183272c100145c82e5';
        let xApiKey = '{SECRET_KEY}';

        controller.getUser(additionallyData, userId, xApiKey, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "_id": "5fc8b3183272c100145c82e5",
  "firstName": "John",
  "lastName": "Snow",
  "createdAt": "2020-12-03T09: 42: 48.472Z",
  "email": "john.snow@domain.com",
  "credits": 10,
  "finishedLessons": [
    {
      "_id": "5f9c1993561a4b276531c78d",
      "name": "Course 1 - Lesson 1"
    },
    {
      "_id": "5f9be7830de1cf1618c88f81",
      "name": "Course 1 - Lesson 2"
    }
  ],
  "inProgressLessons": [
    {
      "_id": "5f9c01ad0de1cf1618c88ff8",
      "name": "Course 1 - Lesson 3"
    }
  ],
  "purchasedCourses": [
    {
      "_id": "5f9c104f0de1cf1618c8900e",
      "name": "Course 2 - Beginners Bootcamp"
    }
  ],
  "purchasedLessons": [
    {
      "_id": "5f9c025c0de1cf1618c88ffe",
      "name": "Course 2 - Lesson For Credits"
    }
  ],
  "loginSessions": 13,
  "totalLoginTime": "17 hours 46 minutes",
  "averageLoginTime": "33 minutes",
  "courses": [
    {
      "_id": "5f9be1250de1cf1618c88f6e",
      "name": "Course 1",
      "progress": 66,
      "startAt": "2020-12-03T10: 19: 13.443Z",
      "userLessonsStarted": 3,
      "lessonsCount": 3,
      "modulesAnalytics": [
        {
          "progress": 100,
          "lessonsAnalytics": [
            {
              "_id": "5f9be7830de1cf1618c88f81",
              "name": "Course 1 - Lesson 1",
              "notStartedYet": false,
              "isInProgress": false,
              "isFinished": true
            }
          ]
        },
        {
          "_id": "5f9be1380de1cf1618c88f70",
          "name": "Module 1",
          "progress": 50,
          "lessonsAnalytics": [
            {
              "_id": "5f9be1b00de1cf1618c88f75",
              "name": "Course 1 - Lesson 2",
              "notStartedYet": false,
              "isInProgress": false,
              "isFinished": true
            },
            {
              "_id": "5f9be1df0de1cf1618c88f77",
              "name": "Course 1 - Lesson 3",
              "notStartedYet": false,
              "isInProgress": true,
              "isFinished": false
            }
          ]
        }
      ]
    },
    {
      "_id": "5f9becf80de1cf1618c88f90",
      "name": "Course 2",
      "progress": 0,
      "startAt": null,
      "userLessonsStarted": 0,
      "lessonsCount": 1,
      "modulesAnalytics": [
        {
          "progress": 0,
          "lessonsAnalytics": [
            {
              "_id": "5f9bef590de1cf1618c88fa9",
              "name": "Course 2 - Lesson For Credits",
              "notStartedYet": true,
              "isInProgress": false,
              "isFinished": false
            }
          ]
        }
      ]
    }
  ],
  "totalPurchases": 3,
  "lifeTimeValue": 1200,
  "orders": [
    {
      "_id": "5fc8b3203272c100145c82e7",
      "vs": 28475,
      "price": 400,
      "createdAt": "2020-12-03T09: 42: 56.544Z",
      "course": {
        "_id": "5f9e9047b5e7e63fc0bba792",
        "name": "Course 2"
      }
    },
    {
      "_id": "5fc8bb5e3272c100145c82fa",
      "vs": 28477,
      "price": 400,
      "createdAt": "2020-12-03T10: 18: 06.015Z",
      "checkout": {
        "_id": "5fa12956dc2344566413f5f9",
        "name": "Checkout - Monthly Membership"
      }
    },
    {
      "_id": "5fc8b32d3272c100145c82eb",
      "vs": 28476,
      "price": 400,
      "createdAt": "2021-01-03T09: 43: 09.894Z",
      "course": {
        "_id": "5f9c104f0de1cf1618c8900e",
        "name": "Checkout - Monthly Membership"
      }
    }
  ],
  "quizes": [
    {
      "_id": "601d466d41816c001bbcb2e5",
      "title": "Introduction Quiz",
      "finishedAt": "2021-02-06T13: 55: 04.919Z",
      "points": 2,
      "results": [
        {
          "question": "What is your name?",
          "answer": "John"
        }
      ],
      "reward": {
        "title": "Student",
        "minPoints": 1,
        "maxPoints": 5,
        "creditsReward": 10,
        "courses": [
          {
            "_id": "5fae58d3383cbc0013570b05",
            "name": "Course 3"
          }
        ]
      }
    }
  ],
  "subscriptions": [
    {
      "membershipStarted": "2020-12-03T09: 42: 56.533Z",
      "membershipTo": "2021-02-03T09: 42: 54Z",
      "active": true,
      "refunded": false,
      "isPastDue": false,
      "cancelled": false,
      "membership": {
        "name": "Checkout - Monthly Membership"
      },
      "period": {
        "name": "Monthly Payment"
      }
    }
  ],
  "endedSubscriptions": [
    {
      "membershipStarted": "2020-12-03T09: 42: 56.533Z",
      "membershipTo": "2021-12-03T09: 42: 54Z",
      "active": false,
      "refunded": true,
      "isPastDue": false,
      "cancelled": false,
      "membership": {
        "name": "Checkout - Monthly Membership"
      },
      "period": {
        "name": "Year Payment"
      }
    }
  ]
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * #### Request Body (JSON)

```json
{
    "firstName": First Name *Required
    "lastName": Last Name *Required
    "email": Email *Required
    "password": Password (If null, password will be generated and sent to user's email)
    "role": Role ID (Default is USER ROLE)
    "credits": Total amount of credits
    "invoicing": {
        "name": Company Name
        "vatNo": VAT Number
        "street": Invoicing Street
        "city": Invoicing City
        "countryCode": Incoicing Country Code
        "zipcode": Invoicing Zip Code
    }
}
```
     */
    it("should testCreateUser response", function testCreateUserTest(done) {
        // parameters for the API call
        let xApiKey = '{SECRET_KEY}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe2@domain.com"
}, 'CreateUserRequest');

        controller.createUser(xApiKey, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "_id": "603511aea0c3a207d22491ec",
  "firstName": "John",
  "lastName": "Smith",
  "createdAt": "2021-02-23T14: 31: 10.136Z",
  "email": "john.smithx@forlogis.com",
  "credits": 0,
  "finishedLessons": [],
  "inProgressLessons": [],
  "purchasedCourses": [],
  "purchasedLessons": [],
  "courses": null,
  "orders": null,
  "quizes": null,
  "subscriptions": null,
  "endedSubscriptions": null,
  "password": "yxiqf"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * - Add course or courses to user purchases.  
- User will get Lifetime access to this course/s
- Response is Array of users purchased courses

#### Request Body (JSON)
```json
{
    "courses": [String/Array] Course ID or Courses IDs Array *Required
}
```
     */
    it("should testAssignCoursesToUser response", function testAssignCoursesToUserTest(done) {
        // parameters for the API call
        let userId = '6047bf67cc31abe60383996b';
        let xApiKey = '{SECRET_KEY}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "courses": [
    "5f9bf6510de1cf1618c88faf",
    "5f9bf6e30de1cf1618c88fb1"
  ]
}, 'AssignCoursesToUserRequest');

        controller.assignCoursesToUser(userId, xApiKey, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isArrayOfJsonObjectsProperSubsetOf(context.response.body, [
  {
    "_id": "5fabd06a383cbc0013570adc",
    "name": "Course 14 - Copywriting Masterclass"
  },
  {
    "_id": "5f9bf6510de1cf1618c88faf",
    "name": "Course 3"
  },
  {
    "_id": "5f9bf6e30de1cf1618c88fb1",
    "name": "Course 4"
  }
], false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * - Add course or courses to user purchases.  
- User will get Lifetime access to this course/s
- Response is Array of users purchased courses

#### Request Body (JSON)
```json
{
    "courses": [String/Array] Course ID or Courses IDs Array *Required
}
```
     */
    it("should testAssignCoursesToUser1 response", function testAssignCoursesToUser1Test(done) {
        // parameters for the API call
        let userId = '6047bf67cc31abe60383996b';
        let xApiKey = '{SECRET_KEY}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "courses": [
    "5f9bf6510de1cf1618c88faf",
    "5f9bf6e30de1cf1618c88fb1"
  ]
}, 'AssignCoursesToUserRequest');

        controller.assignCoursesToUser(userId, xApiKey, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isArrayOfJsonObjectsProperSubsetOf(context.response.body, [
  {
    "_id": "5fabd06a383cbc0013570adc",
    "name": "Course 14 - Copywriting Masterclass"
  },
  {
    "_id": "5f9bf6510de1cf1618c88faf",
    "name": "Course 3"
  },
  {
    "_id": "5f9bf6e30de1cf1618c88fb1",
    "name": "Course 4"
  }
], false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * #### Request Body (JSON)

```json
{
    "firstName": First Name
    "lastName": Last Name
    "email": Email
    "password": Password (If null, password will be generated and sent to user's email)
    "role": Role ID (Default is USER ROLE)
    "credits": Total amount of credits
    "invoicing": {
        "name": Company Name
        "vatNo": VAT Number
        "street": Invoicing Street
        "city": Invoicing City
        "countryCode": Incoicing Country Code
        "zipcode": Invoicing Zip Code
    }
}
```
     */
    it("should testUpdateUser response", function testUpdateUserTest(done) {
        // parameters for the API call
        let userId = '603519eeef9afa0f890abfc1';
        let xApiKey = '{SECRET_KEY}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "firstName": "Jack",
  "password": "1234"
}, 'UpdateUserRequest');

        controller.updateUser(userId, xApiKey, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "_id": "603519eeef9afa0f890abfc1",
  "firstName": "Jack",
  "lastName": "Smith",
  "createdAt": "2021-02-23T15: 06: 22.223Z",
  "email": "john.smithx@forlogis.com",
  "credits": 0,
  "finishedLessons": [],
  "inProgressLessons": [],
  "purchasedCourses": [],
  "purchasedLessons": [],
  "courses": null,
  "orders": null,
  "quizes": null,
  "subscriptions": null,
  "endedSubscriptions": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * It's impossible to delete user with orders. If you want delete user with orders, contact support

---

Deleting user also delete user's   
- Comments  
- Threads  
- Lessons and bonuses notes  
- Subscriptions
- Quiz  
- Course Analytics
     */
    it("should testDeleteUser response", function testDeleteUserTest(done) {
        // parameters for the API call
        let userId = '6047bfb2cc31abe60383996c';
        let xApiKey = '{SECRET_KEY}';
        let contentType = 'application/json';

        controller.deleteUser(userId, xApiKey, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "_id": "60351954ef9afa0f890abfc0",
  "firstName": "John",
  "lastName": "Smith",
  "createdAt": "2021-02-23T15: 03: 48.03Z",
  "email": "john.smithx@forlogis.com",
  "credits": 0,
  "finishedLessons": [],
  "inProgressLessons": [],
  "purchasedCourses": [],
  "purchasedLessons": [],
  "courses": null,
  "orders": null,
  "quizes": null,
  "subscriptions": null,
  "endedSubscriptions": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
