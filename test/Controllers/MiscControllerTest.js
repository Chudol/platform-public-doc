/**
 * PlatformPublicAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.MiscController;
const M200PollActivityDatum = testerlib.M200PollActivityDatum;

describe("MiscController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * - Endpoint for downloading activitiy data like "Finished Course", "Finished Lesson", etc.  
- Endpoint will download all data of selected trigger name for last 1 hour and mark them as "POLLED", so on next call this data will be ignored

#### How to use  
- Endpoint accepting parameter **triggerName** which can be one of this:     
<br/>

**finish-course**: poll data about users and course they finished  
**finish-lesson**: poll data about users and lesson they finished

<br/><br/>
- Endpoint also accepting query, when you can select which course or lesson activity you want to get  
<br />
**course**: Course ID for finish-course
**lesson**: Lesson ID for finish-lesson
     */
    it("should testPollActivityData response", function testPollActivityDataTest(done) {
        // parameters for the API call
        let triggerName = 'finish-course';
        let xApiKey = '{SECRET_KEY}';

        controller.pollActivityData(triggerName, xApiKey, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['X-Powered-By'] = null;
            headers['Vary'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isArrayOfJsonObjectsProperSubsetOf(context.response.body, [
  {
    "id": "604b420d0b2a350019078175",
    "lesson": {
      "id": "5f9fe407982ed34d4583af18",
      "name": "Lesson X"
    },
    "user": {
      "id": "5fc7067204edd400132b22d4",
      "firstName": "John",
      "lastName": "Doe",
      "email": "john@doe.com"
    }
  }
], false, true, false));
            done();
        }).catch(() => undefined);
    });
});
